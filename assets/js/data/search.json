[
  
  {
    "title": "Build your own OpenWrt firmware for IPQ devices",
    "url": "/posts/build-openwrt-for-ipq-devices/",
    "categories": "blog, tutorial",
    "tags": "openwrt, feed-ipq, wireless, routers",
    "date": "2025-03-13 10:00:00 +0530",
    





    
    "snippet": "OpenWrt - An overviewOpenWrt is a Linux based Open-source Operating system which are primarily usedon wireless routers and mesh devices. For users, OpenWrt means the freedom offull customization, a...",
    "content": "OpenWrt - An overviewOpenWrt is a Linux based Open-source Operating system which are primarily usedon wireless routers and mesh devices. For users, OpenWrt means the freedom offull customization, allowing the use of an embedded device in ways the vendornever envisioned. Designed to be lightweight and efficient, OpenWrt is capableto run in range of hardware products, be it low memory Wi-Fi routers, CPE routers andso on.OpenWrt supports a wide range of System-on-Chip (SoC) vendors including but notlimited to Airoha, Broadcom, MediaTek, Qualcomm, Realtek. SoC vendor prefersOpenWrt based Operating System for their Wireless Routers, since it providesVarious customization, Package management, Better Security features and a greatCommunity support.For Wireless chipsets in the routers, OpenWrt uses upstream/open-source versionof network drivers and packages for their respective chipsets which are freelyavailable and published into the open-source community.Along with open-source contributions, SoC Vendors focus on developing the latestfeatures, Enhancements and Bug fixes. While most of the features are publishedto the open-source community, Vendor specific features will be available only inthrough their External release repos until the packages and patches areupstreamed to the community.Qualcomm Internet Processor (IPQ) in Wi-Fi Product lineQualcomm is one of the leading SoC vendors for most of the wireless routers.Qualcomm Internet Processor (IPQ) refers to a series of System-on-Chip (SoC)designed specifically for Wi-Fi networking devices like routers, gateways andaccess points. IPQ807X, IPQ95XX and IPQ53XX are few of the latest Qualcomm SoC&#8217;sseries available in the market and are utilized in the various enterprise,retail and carrier broadband products.Qualcomm Wi-Fi chipset details are available in the Wiki Page.Qualcomm provides releases to the Customer and open-source community for IPQdevices through Codelinaro website, whose source code can be downloaded basedon the details here.feed-ipq : Collection of package recipes for IPQ devicesfeed-ipq is an OpenWrt feed repository which helps to build latest OpenWrtfirmware for Qualcomm Wi-Fi SoC platforms (IPQ Devices), which is on-par withthe latest release from Qualcomm. This feed can be easily integrated intoOpenWrt and OpenWrt based build systems like prplOS, IOWRT and openWiFi.feed-ipq is available at, https://github.com/zilogic-systems/feed-ipqfeed-ipq is intended to be layered on-top of an OpenWrt providing only therequired packages and files relevant for bring-up of the networking and Wi-Fifeatures in the IPQ devices. This repository contains OpenWrt Target directoryfiles for IPQ devices, Network, Wi-Fi drivers, packages and scripts.These can be used along with other feeds of OpenWrt.Directory structure.|-- feeds|   |-- clo-upstream|   |-- nss-host|   |-- platform_utils|   |-- ssdk|   `-- wlan_utils|-- README.md`-- targets    `-- ipq95xxDirectory structure of the feed-ipq is segregated based on the followingtargets - contains IPQ targets like ipq95xx and target related configs, files and patchesfeeds   - contains IPQ target specific drivers, packages and scriptsfeeds/clo-upstream - contains OpenWrt upstream components which are customized for IPQ targetsBuild OpenWrt using feed-ipq for IPQ targetsOpenWrt repo initializationClone the OpenWrt repository using the commandgit clone https://github.com/openwrt/openwrt.gitcd openwrtCheckout to OpenWrt Latest Stable Release - v24.10.0git checkout v24.10.0Configure feed-ipq repo in feeds.conf.defaultAppend the below line into OpenWrt&#8217;s feeds.conf.default to add and configurefeed-ipq repo into the buildsrc-git feed_ipq https://github.com/zilogic-systems/feed-ipq.git^23e8cddafd7d21810288024ef5de137447646fc6Update the latest commit_hash in feeds.conf.default to fetch updated commits infeed-ipq repo.Bump Kernel version for IPQ targetsBased on clo release, Kernel version needs to be updated for IPQ targetsUpdate the below Kernel version related details in include/kernel-6.6LINUX_VERSION-6.6 = .47LINUX_KERNEL_HASH-6.6.47 = d43376c9e9eaa92bb1b926054bd160d329c58a62d64bd65fe1222c11c6564f50Update &amp; Install feedsRun ./scripts/feeds update -a to obtain all the latest package definitionsdefined in feeds.conf / feeds.conf.defaultRun ./scripts/feeds install -a to install symlinks for all obtainedpackages into package/feeds/Install IPQ targets from feed-ipqInstall IPQ targets from feed_ipq directory using the command./scripts/feeds install ipq95xxAbove command will create a symlink of target between feeds/feed_ipq/targets/ipq95xx and target/linux/feeds/ipq95xx directoryConfigure Build Target profileSelect and save ipq95xx target profile using the make menuconfig command in the below sequence1. Target System  -&gt; Qualcomm Technologies, Inc. IPQ95XX2. Subtarget      -&gt; (QTI IPQ95xx(64bit) based boards)3. Target Profile -&gt; Qualcomm IPQ9574-RDP4334. Save -&gt; .config5. Exit -&gt; YesTrigger OpenWrt buildExecute the below command to trigger the OpenWrt buildmake V=e -j$(nproc)Build ArtifactsList of OpenWrt Firmware Images generated for IPQ devicesKernel_Image - build_dir/target-aarch64_cortex-a73+neon-vfpv4_musl/linux-ipq95xx_generic/qcom_rdp433-uImage.itbRootfs_Image - build_dir/target-aarch64_cortex-a73+neon-vfpv4_musl/linux-ipq95xx_generic/root.squashfsFlashing Instructions for IPQ devicesGeneric Flashing InstructionsIn U-Boot prompt, Download the Firmware Image which needs to be flashed into the Targettftpb &lt;file_name&gt;Once the Image is downloaded, Flash the image into the respective partitionflash &lt;partition_name&gt;Flashing in eMMC boardsExecute the below set of commands to flash kernel and rootfs image into IPQ emmc flash variant boardstftpb &lt;Kernel_Image&gt; &amp;&amp; flash 0:HLOStftpb &lt;Rootfs_Image&gt; &amp;&amp; flash rootfsFlashing in NAND BoardsExecute the below set of commands to flash kernel and rootfs image into IPQ nand flash variant boardstftpb &lt;Kernel_Image&gt; &amp;&amp; flash kerneltftpb &lt;Rootfs_Image&gt; &amp;&amp; flash ubi_rootfsVerification of the built ImageIn the generated OpenWRT Image, We could able to validate the below featuresOpenWrt version - 24.10.0GCC version     - GCC 13.3.0 r28427-6df0e3d02aEthernet - WANEthernet - LANWiFi Interface up and runningWiFi Client connectivity - 2GWiFi Client connectivity - 5GPing from AP to 2G clientPing from AP to 5G clientSpeed test in 2G clientSpeed test in 5G clientEthernetTarget device could able to reach Internet through WAN Network.root@OpenWrt:~# ping -c 5 8.8.8.8PING 8.8.8.8 (8.8.8.8): 56 data bytes64 bytes from 8.8.8.8: seq=0 ttl=118 time=1.454 ms64 bytes from 8.8.8.8: seq=1 ttl=118 time=1.293 ms64 bytes from 8.8.8.8: seq=2 ttl=118 time=1.403 ms64 bytes from 8.8.8.8: seq=3 ttl=118 time=1.261 ms64 bytes from 8.8.8.8: seq=4 ttl=118 time=1.244 ms--- 8.8.8.8 ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 1.244/1.331/1.454 msroot@OpenWrt:~#root@OpenWrt:~# ping -c 5 google.comPING google.com (142.250.71.14): 56 data bytes64 bytes from 142.250.71.14: seq=0 ttl=118 time=1.356 ms64 bytes from 142.250.71.14: seq=1 ttl=118 time=1.395 ms64 bytes from 142.250.71.14: seq=2 ttl=118 time=1.216 ms64 bytes from 142.250.71.14: seq=3 ttl=118 time=1.214 ms64 bytes from 142.250.71.14: seq=4 ttl=118 time=1.225 ms--- google.com ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 1.214/1.281/1.395 msWiFiWiFi Interfaces for all the Radios are up and running.root@OpenWrt:~# iw devphy#0        Interface wlan0                ifindex 13                wdev 0x4                addr 00:03:7f:12:1b:1b                ssid feed-ipq-2g                type AP                Power mode: 0                link 0:                  addr 00:03:7f:12:1b:1b                  channel 6 (2437 MHz), width: 20 MHz, center1: 2437 MHz                  txpower 29.00 dBm        Interface wlan2                ifindex 12                wdev 0x3                addr 00:03:7f:12:1d:1d                ssid feed-ipq-6g                type AP                Power mode: 0                link 0:                  addr 00:03:7f:12:1d:1d                  channel 49 (6195 MHz), width: 80 MHz, center1: 6225 MHz                  txpower 21.00 dBm        Interface wlan1                ifindex 11                wdev 0x2                addr 00:03:7f:12:1c:1c                ssid feed-ipq-5g                type AP                Power mode: 0                link 0:                  addr 00:03:7f:12:1c:1c                  channel 36 (5180 MHz), width: 80 MHz, center1: 5210 MHz                  txpower 28.00 dBmVerified WiFi Clients connectivity to 2G and 5G Radios.root@OpenWrt:~# iwinfo wlan0 assoc32:FF:B0:0E:1A:91  -55 dBm / -106 dBm (SNR 51)  10880 ms ago        RX: 172.0 MBit/s, HE-MCS 7, 20MHz, HE-NSS 2, HE-GI 0, HE-DCM 0       139 Pkts.        TX: 1.0 MBit/s                                   110 Pkts.        expected throughput: unknownroot@OpenWrt:~#root@OpenWrt:~# iwinfo wlan1 assocFA:30:3B:77:11:84  -49 dBm / -106 dBm (SNR 57)  5950 ms ago        RX: 1200.9 MBit/s, HE-MCS 11, 80MHz, HE-NSS 2, HE-GI 0, HE-DCM 0      2350 Pkts.        TX: 432.3 MBit/s, HE-MCS 4, 80MHz, HE-NSS 2, HE-GI 0, HE-DCM 0      6169 Pkts.        expected throughput: unknownReferenceshttps://openwrt.org/https://openwrt.org/docs/guide-developer/feedshttps://github.com/zilogic-systems/feed-ipq/blob/ath.13.0/README.md"
  }
  
]

