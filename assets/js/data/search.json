[
  
  {
    "title": "Build and upgrade prplOS on Banana Pi R4",
    "url": "/posts/build-and-upgrade-prplos-on-banana-pi-r4/",
    "categories": "blog, tutorial",
    "tags": "prplOS, wireless, routers, mediatek, filogic, bpi",
    "date": "2025-07-07 10:00:00 +0530",
    





    
    "snippet": "In the previous articleGetting Started with prplOS on Banana Pi R4,we have seen how to explore prplOS Image on Banana PI R4.prplOS is booted using the pre-built image downloaded from the github rep...",
    "content": "In the previous articleGetting Started with prplOS on Banana Pi R4,we have seen how to explore prplOS Image on Banana PI R4.prplOS is booted using the pre-built image downloaded from the github repo.In this article, we can build our own custom prplOS Image for Banana PI R4including custom modifications and local patches added to support the new hardware.prplOS can be built for any OpenWrt compatible devices with custom build instructionstailored to the Target hardware and has several advantages likeExplore the prplOS build system and architectureBring-up new hardware support within prplOSAdapt and configure prplOS to harness all supported features on new hardwareExplore prplOS components, features and packagesDevelop and Integrate new features in prplOSBuild prplOS Image for Banana Pi R4bpi-r4-dev-resourcesbpi-r4-dev-resourcesis my github repo which contains Banana Pi R4 related dev resources likeCustom patchesBuild ConfigurationsImage artifactsFor building prplOS for the Banana Pi R4 using the prplos-v4.0.0 release,Download the required patch from the bpi-r4-dev-resources github repouser@linux:[bpi-r4-dev-resources]$ tree --charset=ascii.|-- prplos|   `-- prplos-v4.0.0|       `-- patches|           |-- feed_mediatek|           |   |-- 0001-filogic-Disable-generating-snand-build-artifacts.patch|           |   |-- 0002-filogic-Remove-eth2-from-WAN-interface-mapping-for-b.patch|           |   |..... skipped|           `-- prplos|               |-- 0001-mtk_filogic-Add-bananapi_bpi-r4-support-in-prplos.patch|               |-- 0002-uboot-mediatek-Add-latest-uboot-mediatek-from-openwr.patch|               |..... skipped`-- README.md6 directories, 8 filesSetting Up the prplOS Build EnvironmentFor detailed instructions on setting up the build environment, refer to theBuilding-prplOSpage on the official wiki.1. Initialize prplOS repositoryClone the prplOS repository using the below command and navigate to the prplosbuild directorygit clone https://gitlab.com/prpl-foundation/prplos/prplos.gitcd prplosCheckout to prplOS latest stable release, prplos-v4.0.0git checkout prplos-v4.0.02. Add Banana Pi R4 support in prplosTo add Banana Pi R4 support in prplOS, a custom set of patches needs to beapplied to the prplos directory.These patches enable the following features:Include Banana Pi R4&#8217;s Target Device model name in mtk_filogic.yml, allowing the BPI-R4 to be built as part of prplOS.Integrate the latest uboot-mediatek from OpenWrt to add support for Banana PI R4Disable Banana PI R4 snand builds since snand support is currently not availableEnable arm-trusted-firmware and u-boot-mt7988 related packages specific to the Banana Pi R4Update LAN and WAN interface names to lan1 and wan, matching the Banana Pi R4â€™s interface namingApply the relevant patches in prplos directory using the follow commandgit am ~/Downloads/bpi-r4-dev-resources/prplos/prplos-v4.0.0/Patches/prplos/*.patch3. Configure Target profile for prplOS buildgen_config.py is a Python helper script in prplOS that simplifies selecting thetarget device profile and features required for building prplOS images.It automatically configures the necessary build options, target architecture,and packages based on the selected profile instead of using make menuconfig toselect and configure the Target.To configure the build for Banana Pi R4, run the following command:./scripts/gen_config.py mtk_filogic prpl securityHere:mtk_filogic specifies the target architecture (MediaTek Filogic).prpl enables prpl specific packages and configurations.security includes additional security-related packages for the build.4. Add Banana Pi R4 support in feed_mediatekThe feed_mediatek directory contains the below for building prplOS on MediaTekplatformsTarget related filesKernel related DTS, Configs, Files and PatchesMediatek specific driver and packagesA custom set of patches needs to be applied to the feed_mediatek directory whichincludes custom changes for necessary image generation and network configurationsto build and boot prplOS Image on Banana Pi R4 deviceThese patches includes the following custom changesDisable generating snand build artifactsRemove eth2 from WAN interface mapping for bpi-r4Apply the relevant patches in feed_mediatek directory using the follow commandgit am ~/Downloads/bpi-r4-dev-resources/prplos/prplos-v4.0.0/Patches/feed_mediatek/*.patch5. Build prplOSFinally, start building prplOS with the following make commandmake V=e -j$(nproc)Build ArtifactsBelow is the list of prplOS firmware images generated for Banana Pi R4SD Card Image - bin/targets/mediatek/filogic/prplos-mediatek-filogic-bananapi_bpi-r4-sdcard.img.gzSysupgrade Image - bin/targets/mediatek/filogic/prplos-mediatek-filogic-bananapi_bpi-r4-squashfs-sysupgrade.itbUpgrade prplOS Image on Banana PI R4Method 1 : Burn prplOS Image to SD CardBurn prplOS Image to SD Card using the instructions provided in the officialBanana PI R4 document.Once the Image is burned, Insert the SD Card into Banana PI R4 and switchBoot Jumper to boot from SD.Power on the Banana Pi R4 to boot your own prplOS Image from the SD card.Method 2: Image upgrade through Sysupgrade featureIf prplOS Image is already flashed in the Banana PI R4, We can use sysupgradefeature to upgrade the latest image without updating the SD card manually.Copy the Sysupgrade Image into Banana PI R4 using the scp commandroot@prplOS:/# cat /proc/versionLinux version 6.6.89 (user@3392f6529df3) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 12.3.0 r0+25055-4b63d62a00) 12.3.0, GNU ld (GNU Binutils) 2.40.0) #0 SMP Mon Jun 30 05:52:34 2025root@prplOS:/# scp user@172.16.0.215:~/Downloads/prplos-mediatek-filogic-bananapi_bpi-r4-squashfs-sysupgrade.itb /tmp/user@172.16.0.215's password:prplos-mediatek-filogic-bananapi_bpi-r4-squas 100%   36MB  36.0MB/s   00:01Upgrade the latest prplOS Image in Banana PI R4 through sysupgrade commandroot@prplOS:/# sysupgrade -v -n /tmp/prplos-mediatek-filogic-bananapi_bpi-r4-squashfs-sysupgrade.itbMon Jul  7 12:44:40 GMT 2025 upgrade: Commencing upgrade. Closing all shell sessions.Watchdog handover: fd=3- watchdog -Watchdog does not have CARDRESET supportMon Jul  7 12:34:08 GMT 2025 upgrade: Sending TERM to remaining processes ....... skipped ....Mon Jul  7 12:44:55 UTC 2025 upgrade: Performing system upgrade...fitblk: /dev/fit0 releasedfitblk: /dev/fitrw released8+0 records in8+0 records outMon Jul  7 12:45:02 UTC 2025 upgrade: Upgrade completedMon Jul  7 12:45:03 UTC 2025 upgrade: Rebooting system...umount: can't unmount /dev: Resource busyumount: can't unmount /tmp[  356.673819] reboot: Restarting system.... skipped ....BusyBox v1.36.1 (2025-06-30 05:52:34 UTC) built-in shell (ash)                   _  ___  ____  _ __  _ __ _ __ | |/ _ \\/ ___| | '_ \\| '__| '_ \\| | | | \\___ \\ | |_) | |  | |_) | | |_| |___) | | .__/|_|  | .__/|_|\\___/|____/ |_|        |_| based on OpenWrt --------------------------------      prplOS 3.2.0-4b63d62a --------------------------------=== WARNING! =====================================There is no root password defined on this device!Use the \"passwd\" command to set up a new passwordin order to prevent unauthorized SSH logins.--------------------------------------------------root@prplOS:/#root@prplOS:/# cat /proc/versionLinux version 6.6.89 (user@754c8cc7d26d) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 12.3.0 r0+25055-4b63d62a00) 12.3.0, GNU ld (GNU Binutils) 2.40.0) #0 SMP Mon Jun 30 05:52:34 2025We could now able to build and upgrade latest prplOS Image through various Imageupgrade methods in Banana PI R4. It opens up a way to build and explore prplOSarchitecture through various customizations of our own.In the future posts, we will cover how to enable, explore WiFi and other prplOSrelated features in Banana PI R4."
  },
  
  {
    "title": "Getting Started with prplOS on Banana Pi R4",
    "url": "/posts/getting-started-with-prplos-on-banana-pi-r4/",
    "categories": "blog, tutorial",
    "tags": "prplOS, wireless, routers, mediatek, filogic, bpi",
    "date": "2025-07-01 10:00:00 +0530",
    





    
    "snippet": "prplOS is an open-source operating system based on OpenWrt specifically designedfor embedded networking devices like broadband customer premises equipment (CPE),Home gateways and Wi-Fi routers.Leve...",
    "content": "prplOS is an open-source operating system based on OpenWrt specifically designedfor embedded networking devices like broadband customer premises equipment (CPE),Home gateways and Wi-Fi routers.Leveraging modern micro-services and containerized applications, prplOS can beused to build robust, manageable, and flexible networking solutions that caterto the evolving broadband ecosystem.prplOS is rapidly gaining prominence in the Wi-Fi networking world due to itsrich set of features likeInteroperability to support multiple hardware platformsModular &amp; Micro-services based architectureIntegrated with prplMesh for seamless mesh networking solutionsRemote Management using TR-069 (CWMP) and TR-369 (USP)Enhanced security and system reliabilityFlexibility &amp; CustomizationOpen and Standardized DevelopmentprplOS is developed and maintained by theprpl Foundation, an open source, community-drivenorganization aimed to develop open source software for carrier-grade CPE throughinnovation and collaboration.To ensure Release stability, prpl Foundation validates eachprplOS releaseon a defined set ofreference platforms,These officially supported reference platforms serve as the primary targets fordevelopment, testing, and continuous integration in prpl.While the prpl Foundation officially supports a defined set of reference platforms,prplOS can be built for any OpenWrt compatible devicesThis article helps us to setup and run prplOS on Banana Pi R4, a high-performance,open-source router development board.Banana Pi R4 - Router development boardBanana Pi R4 is a high performance WiFi-7 router development board based onMediaTek MT7988A (Filogic 880) processor. It offers a comprehensive set of cutting-edgefeatures including Wi-Fi 7 support typically seen in today&#8217;s high-end routersand serves as an excellent platform for building and testing embedded routeroperating systems such as OpenWrt, RDK-B, prplOS and so on.Key FeaturesCPU: MediaTek MT7988A (Filogic 880) quad-core ARM Cortex-A73, 1.8GHz processorRAM: 4GB or 8GB DDR4Storage: 8GB eMMC, 128MB SPI-NAND flash, MicroSD card slotNetwork: 4 Gigabit Ethernet ports, 2x 10 Gigabit SFP portsWiFi : Wi-Fi 7 Tri-band (2.4 GHz, 5 GHz, and 6 GHz)Banana PI R4 setupBelow is my Banana Pi R4 development setup, which is used for building, debugging, andtesting custom OpenWrt and prplOS images.This setup includes the following componentsBanana Pi R4 board with protective caseBPI-R4-NIC-BE14 WiFi 7 moduleUSB-UART adapter for console accessHeatsink for effective thermal management19V power supplySetup prplOS on Banana PI R4Prebuilt prplOS Images for Banana PI R4 are available for download on my GitHubrepo bpi-r4-dev-resources.Download the below files from the latestprplOS images artifactsprplos-mediatek-filogic-bananapi_bpi-r4-sdcard.img.gzprplos-mediatek-filogic-bananapi_bpi-r4-squashfs-sysupgrade.itbBurn prplOS Image to SD Card using the instructions provided in the officialBanana PI R4 document.Once the Image is burned, Insert the SD Card into Banana PI R4 and switchBoot Jumper to boot from SD.Power on the Banana Pi R4 to boot the prplOS Image from the SD card. prplOS isnow running and ready for exploration on the Banana Pi R4.Walk-through prplOS bootlog for Banana Pi R4prplOS is successfully booted for banana pi bpi-r4 target.Below excerpt from the prplOS bootlog, covers the following stages of booting,Booting : Bootloader stagesBooting : U-BootBooting : Kernel version - Linux version 6.6.89prplOS promptF0: 102B 0000FA: 1042 0000FA: 1042 0000 [0200]F9: 1041 0000F3: 1001 0000 [0200]F3: 1001 0000F6: 380E 5800F5: 0000 0000V0: 0000 0000 [0001]00: 0000 0000BP: 0600 0041 [0000]G0: 1190 0000EC: 0000 0000 [3000]MK: 0000 0000 [0000]T0: 0000 014B [0101]Jump to BLNOTICE:  BL2: v2.9(release):OpenWrt v2023-07-24-00ac6db3-2 (mt7988-sdmmc-comb)NOTICE:  BL2: Built : 05:52:34, Jun 30 2025NOTICE:  WDT: Cold bootNOTICE:  WDT: disabledNOTICE:  CPU: MT7988NOTICE:  EMI: Using DDR unknown settingsNOTICE:  EMI: Detected DRAM size: 4096 MBNOTICE:  EMI: complex R/W mem test passedNOTICE:  BL2: Booting BL31NOTICE:  BL31: v2.9(release):OpenWrt v2023-07-24-00ac6db3-2 (mt7988-sdmmc-comb)NOTICE:  BL31: Built : 05:52:34, Jun 30 2025U-Boot 2025.04-OpenWrt-r0+25055-4b63d62a00 (Jun 30 2025 - 05:52:34 +0000)CPU:   MediaTek MT7988Model: Bananapi BPI-R4DRAM:  4 GiBCore:  64 devices, 24 uclasses, devicetree: embed.... skipped ....Starting kernel ...[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x411fd090][    0.000000] Linux version 6.6.89 (user@3392f6529df3) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 12.3.0 r0+25055-4b63d62a00) 12.3.0, GNU ld (GNU Binutils) 2.40.0) #0 SMP Mon Jun 30 05:52:34 2025[    0.000000] Machine model: Bananapi BPI-R4.... skipped ....BusyBox v1.36.1 (2025-06-30 05:52:34 UTC) built-in shell (ash)                   _  ___  ____  _ __  _ __ _ __ | |/ _ \\/ ___| | '_ \\| '__| '_ \\| | | | \\___ \\ | |_) | |  | |_) | | |_| |___) | | .__/|_|  | .__/|_|\\___/|____/ |_|        |_| based on OpenWrt --------------------------------      prplOS 3.2.0-4b63d62a --------------------------------=== WARNING! =====================================There is no root password defined on this device!Use the \"passwd\" command to set up a new passwordin order to prevent unauthorized SSH logins.--------------------------------------------------root@prplOS:/#Verifying Kernel and prplOS Version DetailsThe log snippet below helps to identify the kernel version, board name, and prplOSversion details.root@prplOS:/# cat /proc/device-tree/modelBananapi BPI-R4root@prplOS:/# cat /proc/versionLinux version 6.6.89 (user@3392f6529df3) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 12.3.0 r0+25055-4b63d62a00) 12.3.0, GNU ld (GNU Binutils) 2.40.0) #0 SMP Mon Jun 30 05:52:34 2025root@prplOS:/# cat /etc/openwrt_releaseDISTRIB_ID='prplOS'DISTRIB_RELEASE='3.2.0-4b63d62a'DISTRIB_REVISION='r0+25055-4b63d62a00'DISTRIB_TARGET='mediatek/filogic'DISTRIB_ARCH='aarch64_cortex-a53'DISTRIB_DESCRIPTION='prplOS 3.2.0-4b63d62a r0+25055-4b63d62a00'DISTRIB_TAINTS='no-all busybox override'Ethernet and WAN ConnectivityThe target device receives an IP address on its WAN interface and can reach theInternet through the WAN network.root@prplOS:/# ifconfig wanwan       Link encap:Ethernet  HWaddr 3A:C9:6B:40:16:66          inet addr:172.16.0.222  Bcast:0.0.0.0  Mask:255.255.0.0.... skipped ....root@prplOS:/# ping -c 3 google.co.inPING google.co.in (142.251.223.163) 56(84) bytes of data.64 bytes from lcmaaa-am-in-f3.1e100.net (142.251.223.163): icmp_seq=1 ttl=118 time=1.52 ms64 bytes from lcmaaa-am-in-f3.1e100.net (142.251.223.163): icmp_seq=2 ttl=118 time=1.23 ms64 bytes from lcmaaa-am-in-f3.1e100.net (142.251.223.163): icmp_seq=3 ttl=118 time=1.24 ms--- google.co.in ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2003msrtt min/avg/max/mdev = 1.233/1.330/1.523/0.136 msWiFi ConnectivityWiFi Interfaces for all the Radios are up and running.root@prplOS:/# iw devphy#0        Interface wlan1.2....        Interface wlan2.2....        Interface wlan0.2....        Interface wlan0.1                ifindex 21                wdev 0x8                addr 3a:c9:6b:40:16:6e                ssid prplOS-6G                type AP                channel 37 (6135 MHz), width: 320 MHz, center1: 6105 MHz                txpower 23.00 dBm                multicast TXQ:                        qsz-byt qsz-pkt flows   drops   marks   overlmt hashcol tx-bytes        tx-packets                        0       0       0       0       0       0       0       0               0                Radios: 0 1 2        Interface wlan1.1                ifindex 19                wdev 0x6                addr 3a:c9:6b:40:18:6c                ssid prplOS-5G                type AP                channel 36 (5180 MHz), width: 80 MHz, center1: 5210 MHz                txpower 7.00 dBm                multicast TXQ:                        qsz-byt qsz-pkt flows   drops   marks   overlmt hashcol tx-bytes        tx-packets                        0       0       0       0       0       0       0       0               0                Radios: 0 1 2        Interface wlan2.1                ifindex 17                wdev 0x4                addr 3a:c9:6b:40:19:6b                ssid prplOS-2G                type AP                channel 1 (2412 MHz), width: 20 MHz, center1: 2412 MHz                txpower 6.00 dBm                multicast TXQ:                        qsz-byt qsz-pkt flows   drops   marks   overlmt hashcol tx-bytes        tx-packets                        0       0       0       0       0       0       0       0               0                Radios: 0 1 2        Interface wlan2....        Interface wlan1....        Interface wlan0....Verified WiFi Clients connectivity to 2G and 5G Radios.root@prplOS:/# iwinfo wlan1.1 assocAA:BC:8B:7D:63:4D  -50 dBm / -85 dBm (SNR 35)  0 ms ago        RX: 200.0 MBit/s, VHT-MCS 9, 40MHz, VHT-NSS 1     84536 Pkts.        TX: 390.0 MBit/s, VHT-MCS 9, 80MHz, VHT-NSS 1    218364 Pkts.        expected throughput: unknownroot@prplOS:/# iwinfo wlan2.1 assocEE:70:1D:20:58:5E  -42 dBm / -85 dBm (SNR 43)  890 ms ago        RX: 216.6 MBit/s, HE-MCS 9, 20MHz, HE-NSS 2, HE-GI 1, HE-DCM 0     32609 Pkts.        TX: 154.8 MBit/s, HE-MCS 6, 20MHz, HE-NSS 2, HE-GI 0, HE-DCM 0     62408 Pkts.        expected throughput: unknownUnlocking New Explorations in prplOSWith prplOS running on Banana PI R4, It opens up a way to explore prplOS featuresand to use Banana PI R4 as a high-performance WiFi router. Thanks to its advancedEthernet and WiFi capabilities, Banana PI R4 is a great reference platform forbuilding and testing custom prplOS Images to learn and explore prplOS features.In the future posts, we will cover how to build your own prplOS image forBanana Pi R4, how to enable WiFi and explore other features in prplOS."
  },
  
  {
    "title": "Cross compile applications for OpenWrt",
    "url": "/posts/cross-compile-applications-for-openwrt/",
    "categories": "blog, tutorial",
    "tags": "openwrt, qemu, armsr, wireless, routers",
    "date": "2025-03-21 10:00:00 +0530",
    





    
    "snippet": "In the previous article Build your own OpenWrt firmware for armsr target,We have seen how to build OpenWrt firmware for armsr target. OpenWrt is emulatedusing qemu for armsr target with the custom ...",
    "content": "In the previous article Build your own OpenWrt firmware for armsr target,We have seen how to build OpenWrt firmware for armsr target. OpenWrt is emulatedusing qemu for armsr target with the custom generated image.In this article, we can explore how to pack and release OpenWrt toolchain as atarball using which OpenWrt application can be developed without the need forcomplete OpenWrt build system. We can also explore about how a simple hello_world.cprogram can be cross compiled using the released OpenWrt toolchain and how toexecute the pre-compiled binary in the armsr target.Cross-compilation - A brief introCross-compilation is the process of building software on your developmentenvironment (like PC) to run on different architecture like embedded systems.OpenWrt runs on embedded routers with different hardware architectures like ARM,MIPS, x86 and so on.OpenWrt helps in providing the cross-compilation toolchain as a separate packagesince Application developers doesn&#8217;t need the complete build system to developand test their applications in their Target.Packing OpenWrt ToolchainOpenWrt toolchain can be packed as a tarball by enabling the below package in themenuconfig command.make menuconfig -&gt; Package the OpenWrt-based Toolchain (CONFIG_MAKE_TOOLCHAIN)Enabling the config will help to generate the toolchain tarball in the target&#8217;s bindirectoryarmsr Toolchain artifacts : bin/targets/armsr/armv8/openwrt-toolchain-armsr-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zstUnpacking the OpenWrt ToolchainDownload the OpenWrt toolchain tarball into the development environmentUnpack the OpenWrt toolchain using the commandtar --zstd -xvf openwrt-toolchain-armsr-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zstAfter extracting the files, Cross-compilation Toolchain relate files are available in below pathopenwrt-toolchain-armsr-armv8_gcc-13.3.0_musl.Linux-x86_64/toolchain-aarch64_generic_gcc-13.3.0_musl/|-- aarch64-openwrt-linux -&gt; aarch64-openwrt-linux-musl|-- aarch64-openwrt-linux-musl|-- bin|-- include|-- info.mk|-- lib|-- lib32 -&gt; lib|-- lib64 -&gt; lib|-- libexec|-- share`-- usrCross Compile hello world for armsr-armv8 targetCreate a Simple C program - hello_world.c#include &lt;stdio.h&gt;int main(){\tprintf(\"Hello World - Welcome to OpenWrt\\n\");\treturn 0;}Export Toolchain&#8217;s bin directory path$ export PATH=~/Downloads/openwrt-toolchain-armsr-armv8_gcc-13.3.0_musl.Linux-x86_64/toolchain-aarch64_generic_gcc-13.3.0_musl/bin/:$PATHcross compile the hello_world.c program using the OpenWrt toolchain for armsr target$ aarch64-openwrt-linux-gcc ~/Downloads/hello_world.c -o ~/Downloads/armsr_hello_worldVerify the generated binary format using file command$ file ~/Downloads/armsr_hello_world/home/user/Downloads/armsr_hello_world: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-aarch64.so.1, with debug_info, not strippedValidate hello world binaryIn the development environment/Host machine (like PC), Emulate OpenWrt for armsr target using qemuFind the Gateway (or) host machine&#8217;s IP address using the route -n commandroot@OpenWrt:~# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         10.0.2.2        0.0.0.0         UG    0      0        0 eth1.... skipped ....Verify whether the host machine is reachable from qemu using the ping commandroot@OpenWrt:~# ping 10.0.2.2PING 10.0.2.2 (10.0.2.2): 56 data bytes64 bytes from 10.0.2.2: seq=0 ttl=255 time=0.745 msCopy the generated binary from the host machine into the qemu using the scp commandroot@OpenWrt:~#  scp user@10.0.2.2:~/Downloads/armsr_hello_world ~/Execute the generated binary in the armsr targetroot@OpenWrt:~# ~/armsr_hello_worldHello World - Welcome to OpenWrtFuture Explorations in OpenWrtWith a simple hello_world.c program cross-compiled and running in the OpenWrttarget, It opens up a way to build, modify and test applications using the OpenWrttoolchain without the need for a complete build system. Pre-built OpenWrt toolchainfor different target architectures are also available in OpenWrtusing which applications can be developed for the specific architectures."
  },
  
  {
    "title": "Build your own OpenWrt firmware for IPQ devices",
    "url": "/posts/build-openwrt-for-ipq-devices/",
    "categories": "blog, tutorial",
    "tags": "openwrt, feed-ipq, wireless, routers",
    "date": "2025-03-20 10:00:00 +0530",
    





    
    "snippet": "OpenWrt - An overviewOpenWrt is a Linux based Open-source Operating system which are primarily usedon wireless routers and mesh devices. For users, OpenWrt means the freedom offull customization, a...",
    "content": "OpenWrt - An overviewOpenWrt is a Linux based Open-source Operating system which are primarily usedon wireless routers and mesh devices. For users, OpenWrt means the freedom offull customization, allowing the use of an embedded device in ways the vendornever envisioned. Designed to be lightweight and efficient, OpenWrt is capableto run in range of hardware products, be it low memory Wi-Fi routers, CPE routers andso on.OpenWrt supports a wide range of System-on-Chip (SoC) vendors including but notlimited to Airoha, Broadcom, MediaTek, Qualcomm, Realtek. SoC vendor prefersOpenWrt based Operating System for their Wireless Routers, since it providesVarious customization, Package management, Better Security features and a greatCommunity support.For Wireless chipsets in the routers, OpenWrt uses upstream/open-source versionof network drivers and packages for their respective chipsets which are freelyavailable and published into the open-source community.Along with open-source contributions, SoC Vendors focus on developing the latestfeatures, Enhancements and Bug fixes. While most of the features are publishedto the open-source community, Vendor specific features will be available only inthrough their External release repos until the packages and patches areupstreamed to the community.Qualcomm Internet Processor (IPQ) in Wi-Fi Product lineQualcomm is one of the leading SoC vendors for most of the wireless routers.Qualcomm Internet Processor (IPQ) refers to a series of System-on-Chip (SoC)designed specifically for Wi-Fi networking devices like routers, gateways andaccess points. IPQ807X, IPQ95XX and IPQ53XX are few of the latest Qualcomm SoC&#8217;sseries available in the market and are utilized in the various enterprise,retail and carrier broadband products.Qualcomm Wi-Fi chipset details are available in the Wiki Page.Qualcomm provides releases to the Customer and open-source community for IPQdevices through Codelinaro website, whose source code can be downloaded basedon the details here.feed-ipq : Collection of package recipes for IPQ devicesfeed-ipq is an OpenWrt feed repository which helps to build latest OpenWrtfirmware for Qualcomm Wi-Fi SoC platforms (IPQ Devices), which is on-par withthe latest release from Qualcomm. This feed can be easily integrated intoOpenWrt and OpenWrt based build systems like prplOS, IOWRT and openWiFi.feed-ipq is available at, https://github.com/zilogic-systems/feed-ipqfeed-ipq is intended to be layered on-top of an OpenWrt providing only therequired packages and files relevant for bring-up of the networking and Wi-Fifeatures in the IPQ devices. This repository contains OpenWrt Target directoryfiles for IPQ devices, Network, Wi-Fi drivers, packages and scripts.These can be used along with other feeds of OpenWrt.Directory structure.|-- feeds|   |-- clo-upstream|   |-- nss-host|   |-- platform_utils|   |-- ssdk|   `-- wlan_utils|-- README.md`-- targets    `-- ipq95xxDirectory structure of the feed-ipq is segregated based on the followingtargets - contains IPQ targets like ipq95xx and target related configs, files and patchesfeeds   - contains IPQ target specific drivers, packages and scriptsfeeds/clo-upstream - contains OpenWrt upstream components which are customized for IPQ targetsBuild ArtifactsAfter Integrating feed-ipq into OpenWrt, Below are the List of OpenWrt Firmware Images generated for IPQ devicesKernel_Image - build_dir/target-aarch64_cortex-a73+neon-vfpv4_musl/linux-ipq95xx_generic/qcom_rdp433-uImage.itbRootfs_Image - build_dir/target-aarch64_cortex-a73+neon-vfpv4_musl/linux-ipq95xx_generic/root.squashfsFlashing Instructions for IPQ devicesGeneric Flashing InstructionsIn U-Boot prompt, Download the Firmware Image which needs to be flashed into the Targettftpb &lt;file_name&gt;Once the Image is downloaded, Flash the image into the respective partitionflash &lt;partition_name&gt;Flashing in eMMC boardsExecute the below set of commands to flash kernel and rootfs image into IPQ emmc flash variant boardstftpb &lt;Kernel_Image&gt; &amp;&amp; flash 0:HLOStftpb &lt;Rootfs_Image&gt; &amp;&amp; flash rootfsFlashing in NAND BoardsExecute the below set of commands to flash kernel and rootfs image into IPQ nand flash variant boardstftpb &lt;Kernel_Image&gt; &amp;&amp; flash kerneltftpb &lt;Rootfs_Image&gt; &amp;&amp; flash ubi_rootfsVerification of the built ImageIn the generated OpenWRT Image, We could able to validate the below featuresOpenWrt version - 24.10.0GCC version     - GCC 13.3.0 r28427-6df0e3d02aEthernet - WANEthernet - LANWiFi Interface up and runningWiFi Client connectivity - 2GWiFi Client connectivity - 5GPing from AP to 2G clientPing from AP to 5G clientSpeed test in 2G clientSpeed test in 5G clientEthernetIP Address is assigned to the WAN Interface of the Target device.And Target device could able to reach Internet through WAN Network.root@OpenWrt:~# ifconfig eth0eth0      Link encap:Ethernet  HWaddr 00:03:7F:E6:D1:5E          inet addr:172.16.1.7  Bcast:172.16.255.255  Mask:255.255.0.0          inet6 addr: fd78:4c15:7f9d:0:203:7fff:fee6:d15e/64 Scope:Global          inet6 addr: 2a02:1234:420a:100b:203:7fff:fee6:d15e/64 Scope:Global          inet6 addr: fe80::203:7fff:fee6:d15e/64 Scope:Link          inet6 addr: fd78:4c15:7f9d::8f8/128 Scope:Global          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:1420 errors:0 dropped:390 overruns:0 frame:0          TX packets:45 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:259546 (253.4 KiB)  TX bytes:5318 (5.1 KiB)          Base address:0x1000root@OpenWrt:~#root@OpenWrt:~# ping -c 5 8.8.8.8PING 8.8.8.8 (8.8.8.8): 56 data bytes64 bytes from 8.8.8.8: seq=0 ttl=118 time=1.454 ms64 bytes from 8.8.8.8: seq=1 ttl=118 time=1.293 ms64 bytes from 8.8.8.8: seq=2 ttl=118 time=1.403 ms64 bytes from 8.8.8.8: seq=3 ttl=118 time=1.261 ms64 bytes from 8.8.8.8: seq=4 ttl=118 time=1.244 ms--- 8.8.8.8 ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 1.244/1.331/1.454 msroot@OpenWrt:~#root@OpenWrt:~# ping -c 5 google.comPING google.com (142.250.71.14): 56 data bytes64 bytes from 142.250.71.14: seq=0 ttl=118 time=1.356 ms64 bytes from 142.250.71.14: seq=1 ttl=118 time=1.395 ms64 bytes from 142.250.71.14: seq=2 ttl=118 time=1.216 ms64 bytes from 142.250.71.14: seq=3 ttl=118 time=1.214 ms64 bytes from 142.250.71.14: seq=4 ttl=118 time=1.225 ms--- google.com ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 1.214/1.281/1.395 msWiFiWiFi Interfaces for all the Radios are up and running.root@OpenWrt:~# iw devphy#0        Interface wlan0                ifindex 13                wdev 0x4                addr 00:03:7f:12:1b:1b                ssid feed-ipq-2g                type AP                Power mode: 0                link 0:                  addr 00:03:7f:12:1b:1b                  channel 6 (2437 MHz), width: 20 MHz, center1: 2437 MHz                  txpower 29.00 dBm        Interface wlan2                ifindex 12                wdev 0x3                addr 00:03:7f:12:1d:1d                ssid feed-ipq-6g                type AP                Power mode: 0                link 0:                  addr 00:03:7f:12:1d:1d                  channel 49 (6195 MHz), width: 80 MHz, center1: 6225 MHz                  txpower 21.00 dBm        Interface wlan1                ifindex 11                wdev 0x2                addr 00:03:7f:12:1c:1c                ssid feed-ipq-5g                type AP                Power mode: 0                link 0:                  addr 00:03:7f:12:1c:1c                  channel 36 (5180 MHz), width: 80 MHz, center1: 5210 MHz                  txpower 28.00 dBmVerified WiFi Clients connectivity to 2G and 5G Radios.root@OpenWrt:~# iwinfo wlan0 assoc32:FF:B0:0E:1A:91  -55 dBm / -106 dBm (SNR 51)  10880 ms ago        RX: 172.0 MBit/s, HE-MCS 7, 20MHz, HE-NSS 2, HE-GI 0, HE-DCM 0       139 Pkts.        TX: 1.0 MBit/s                                   110 Pkts.        expected throughput: unknownroot@OpenWrt:~#root@OpenWrt:~# iwinfo wlan1 assocFA:30:3B:77:11:84  -49 dBm / -106 dBm (SNR 57)  5950 ms ago        RX: 1200.9 MBit/s, HE-MCS 11, 80MHz, HE-NSS 2, HE-GI 0, HE-DCM 0      2350 Pkts.        TX: 432.3 MBit/s, HE-MCS 4, 80MHz, HE-NSS 2, HE-GI 0, HE-DCM 0      6169 Pkts.        expected throughput: unknownKey Takeawaysfeed-ipq can be extended for building the mainline OpenWrt for IPQ based devices.This feed can also be used in OpenWrt based router Operating System like prplOS,IOWRT and openWiFi.Referenceshttps://openwrt.org/https://openwrt.org/docs/guide-developer/feeds"
  },
  
  {
    "title": "Build your own OpenWrt firmware for armsr target",
    "url": "/posts/build-openwrt-for-armsr/",
    "categories": "blog, tutorial",
    "tags": "openwrt, qemu, armsr, wireless, routers",
    "date": "2025-03-19 10:00:00 +0530",
    





    
    "snippet": "In the previous article Explore OpenWrt on Emulated hardware,We have seen how to explore OpenWrt without a real hardware. OpenWrt is emulatedusing qemu for armsr target with the pre-built image fro...",
    "content": "In the previous article Explore OpenWrt on Emulated hardware,We have seen how to explore OpenWrt without a real hardware. OpenWrt is emulatedusing qemu for armsr target with the pre-built image from OpenWrt&#8217;s Snapshotdownloads for armsr-armv8. In this article, we can build our own custom Imagesfor armsr target using OpenWrt Buildand can emulate OpenWrt using qemu with the custom generated image.Building your own OpenWrt firmware has several advantages likeExplore OpenWrt components, features and packagesExplore the build system and architectureExplore new features which are not part of the pre-built imagesOptimize the OpenWrt firmware by having only the mandatory packagesBuild firmware with custom changes to understand the feature betterDevelop and Implement new features in OpenWrtBring-up new hardware support in OpenWrtBuild OpenWrt for armsr-armv8DevelopmentTo build your own firmware you need a GNU/Linux, BSD or macOS system (casesensitive filesystem required). Cygwin is unsupported because of the lack of acase sensitive file system.RequirementsYou need the following tools to compile OpenWrt, the package names vary betweendistributions. A complete list with distribution specific packages is found inthe Build System Setupdocumentation.binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-devmake4.1+ perl python3.7+ rsync subversion unzip whichOpenWrt repo initializationClone the OpenWRT repo using the commandgit clone https://github.com/openwrt/openwrt.gitcd openwrtCheckout to Latest Stable release (optional)Checkout to OpenWrt latest stable release - v24.10.0git checkout v24.10.0Update &amp; Install feedsRun ./scripts/feeds update -a to obtain all the latest package definitionsdefined in feeds.conf / feeds.conf.defaultRun ./scripts/feeds install -a to install symlinks for all obtainedpackages into package/feeds/Configure Build Target profileSelect and save armsr target profile using the make menuconfig command in the below sequence1. Target System -&gt; Arm SystemReady (EFI) compliant2. Subtarget -&gt; 64-bit (armv8) machines3. Target Profile -&gt; Generic EFI Boot4. Save -&gt; .config5. Exit -&gt; YesTrigger OpenWrt buildExecute the below command to trigger the OpenWrt buildmake V=e -j$(nproc)Build ArtifactsList of OpenWrt Firmware Images generated for armsr devicesKernel &amp; Rootfs Image - bin/targets/armsr/armv8/openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gzu-boot Image - bin/targets/armsr/armv8/u-boot-qemu_armv8/u-boot.binRunning OpenWrt using qemu with generated ImagesIn the bin directory of the OpenWrt build, Decompress theopenwrt-armsr-armv8-generic-squashfs-combined-efi.img.gz into openwrt-arm-64.imgcd bin/targets/armsr/armv8/gunzip -c openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gz &gt; openwrt-arm-64.imgEmulate OpenWrt for armsr-armv8 target using qemu-system-aarch64 command withthe default arguments for kernel, rootfs image, cpu and network options.qemu-system-aarch64 -nographic \\    -cpu cortex-a53 -machine virt \\    -bios u-boot-qemu_armv8/u-boot.bin \\    -smp 1 -m 1024 \\    -device virtio-rng-pci \\    -drive file=openwrt-arm-64.img,format=raw,index=0,media=disk \\    -netdev user,id=testlan -net nic,netdev=testlan \\    -netdev user,id=testwan -net nic,netdev=testwanWalkthrough OpenWrt bootlog for armsr-armv8OpenWrt is successfully booted for armsr-armv8 target with our custom Image.Below excerpt from the OpenWrt bootlog, covers the following stages of booting,Booting : U-BootBooting : Linux kernel with version Linux version 6.6.73OpenWrt promptU-Boot 2023.04-OpenWrt-r28427-6df0e3d02a (Feb 03 2025 - 23:09:37 +0000)DRAM:  1 GiBCore:  51 devices, 14 uclasses, devicetree: boardFlash: 64 MiBLoading Environment from Flash... *** Warning - bad CRC, using default environmentIn:    pl011@9000000Out:   pl011@9000000Err:   pl011@9000000Net:   eth0: virtio-net#32, eth1: virtio-net#33Hit any key to stop autoboot:  0.... skipped ....EFI stub: Booting Linux Kernel...EFI stub: Using DTB from configuration tableEFI stub: Exiting boot services...[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034][    0.000000] Linux version 6.6.73 (user@linux) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 13.3.0 r28427-6df0e3d02a) 13.3.0, GNU ld (GNU Binutils) 2.42) #0 SMP Mon Feb  3 23:09:37 2025[    0.000000] KASLR enabled[    0.000000] Machine model: linux,dummy-virt.... skipped ....[    0.002194] printk: console [tty1] enabled[    0.002466] printk: bootconsole [pl11] disabledPlease press Enter to activate this console.BusyBox v1.36.1 (2025-02-03 23:09:37 UTC) built-in shell (ash)  _______                     ________        __ |       |.-----.-----.-----.|  |  |  |.----.|  |_ |   -   ||  _  |  -__|     ||  |  |  ||   _||   _| |_______||   __|_____|__|__||________||__|  |____|          |__| W I R E L E S S   F R E E D O M ----------------------------------------------------- OpenWrt 24.10.0, r28427-6df0e3d02a -----------------------------------------------------=== WARNING! =====================================There is no root password defined on this device!Use the \"passwd\" command to set up a new passwordin order to prevent unauthorized SSH logins.--------------------------------------------------root@OpenWrt:~#Kernel and OpenWrt versionKernel and OpenWrt version related details from the ARMSR system based on the custom generated Imageroot@OpenWrt:~# cat /etc/openwrt_releaseDISTRIB_ID='OpenWrt'DISTRIB_RELEASE='24.10.0'DISTRIB_REVISION='r28427-6df0e3d02a'DISTRIB_TARGET='armsr/armv8'DISTRIB_ARCH='aarch64_generic'DISTRIB_DESCRIPTION='OpenWrt 24.10.0 r28427-6df0e3d02a'DISTRIB_TAINTS='no-all'root@OpenWrt:~# uname -aLinux OpenWrt 6.6.73 #0 SMP Mon Feb  3 23:09:37 2025 aarch64 GNU/LinuxUnlocking New Explorations in OpenWrtWith OpenWrt running on qemu with our custom built Image, It opens up a way tobuild, modify, test existing OpenWrt packages (or) Create a new packages whichcan be executed/validated on the emulated hardware and allows for endless optionto learn OpenWrt and its build system.Referenceshttps://dineshloganathan395.github.io/posts/explore-openwrt-on-emulated-hardwarehttps://github.com/openwrt/openwrthttps://openwrt.org/docs/guide-developer/toolchain/buildsystem_essentialshttps://openwrt.org/docs/guide-developer/toolchain/use-buildsystem"
  },
  
  {
    "title": "Explore OpenWrt on Emulated hardware",
    "url": "/posts/explore-openwrt-on-emulated-hardware/",
    "categories": "blog, tutorial",
    "tags": "openwrt, qemu, armsr, wireless, routers",
    "date": "2025-03-17 10:00:00 +0530",
    





    
    "snippet": "OpenWrt - An overviewOpenWrt (Open Wireless RouTer) is an open-source project for creating anembedded operating systems based on Linux. OpenWrt is designed for embeddeddevices, particularly routers...",
    "content": "OpenWrt - An overviewOpenWrt (Open Wireless RouTer) is an open-source project for creating anembedded operating systems based on Linux. OpenWrt is designed for embeddeddevices, particularly routers and is capable to run in range of hardware products,be it low memory Wi-Fi routers, CPE routers, residential gateways, access pointsand so on. In this article, the possibilities of booting up arouter operating system like OpenWrt without a physical hardware is unravelled.Features of OpenWrtBelow are the few key features of OpenWrtConfiguration over command line interface (or) web interface(LuCI)CustomizationPerformance and StabilityAdvanced Networking Features like firewall, VLAN, VPN, QoS and so onEnhanced SecurityMesh NetworkingPackage Management using opkg/apkg package managerUnleash OpenWrt on non-physical hardwareWhile OpenWrt is primarily designed for embedded devices like routers, it&#8217;s notstrictly limited to real hardware and can also be run in virtual machines (VMs),emulator, or on x86 hardware. OpenWrt provides QEMU packages for ARM and x86platforms to explore the OS without the need of real hardware&#8217;s using emulators.QEMU (Quick EMUlator) is a powerful, open-source processor emulator andvirtualizer. QEMU can emulate various CPU architectures (like x86, ARM and soon) and hardware devices allowing you to run software and operating systemsdesigned for those architectures on your current system.This articles helps us to emulate OpenWrt using qemu in Arm SystemReady targetArm SystemReadyArm SystemReady (or) armsr is an openwrt target that is developed based onArmSystemReady compliance program where an Operating System image will becompatible across ARM based hardware manufacturers.Arm SystemReady is implemented in alignment with the two OS environment andfirmware approaches commonly used to generate and install the OS Images. Theseare split into the following bandsSystemReady bandSystemReady Devicetree bandOpenWrt uses the SystemReady Devicetree band, where the preferred method ofbooting the OS is based on the hardware devicetree.Arm SystemReady on OpenWrtarmsr takes over from the previous armvirt target in OpenWrt and addssupport for Arm systems that support booting EFI images. armsr supports the belowsubtargetsarmv7 for 32-bit machinesarmv8 for 64-bit machinesQEMU can be used to emulate armsr target running OpenWrt without the needs forreal hardware.Refer OpenWrt Target &#8594; armsr &#8594; READMEto get the detailed instructions on how to boot the OpenWrt SystemReady image.Running OpenWrt using qemuFor Running OpenWrt on QEMU, we can use armsr-armv8 as a reference target to bootand analyse OpenWrt OS.Prebuilt Images are available and can be downloaded from the OpenWrt&#8217;s Snapshotdownloads for armsr-armv8.Download the below image files from the OpenWrt link for emulating armsr targetusing qemu.openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gzu-boot-qemu_armv8/u-boot.binDecompress the generic-squashfs-combined-efi.img.gz into openwrt-arm-64.imggunzip -c openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gz &gt; openwrt-arm-64.imgEmulate OpenWrt for armsr-armv8 target using qemu-system-aarch64 command withthe default arguments for kernel, rootfs image, cpu and network options.qemu-system-aarch64 -nographic \\    -cpu cortex-a53 -machine virt \\    -bios u-boot.bin \\    -smp 1 -m 1024 \\    -device virtio-rng-pci \\    -drive file=openwrt-arm-64.img,format=raw,index=0,media=disk \\    -netdev user,id=testlan -net nic,netdev=testlan \\    -netdev user,id=testwan -net nic,netdev=testwanWalkthrough OpenWrt bootlog for armsr-armv8OpenWrt is successfully booted for armsr-armv8 target.Below excerpt from the OpenWrt bootlog, covers the following stages of booting,Booting : U-BootBooting : Linux kernel with version Linux version 6.6.83OpenWrt promptU-Boot 2023.04-OpenWrt-r29028-adc4d95c74 (Mar 16 2025 - 21:43:02 +0000)DRAM:  1 GiBCore:  51 devices, 14 uclasses, devicetree: boardFlash: 64 MiBLoading Environment from Flash... *** Warning - bad CRC, using default environmentIn:    pl011@9000000Out:   pl011@9000000Err:   pl011@9000000Net:   eth0: virtio-net#32, eth1: virtio-net#33Hit any key to stop autoboot:  0.... skipped ....EFI stub: Booting Linux Kernel...EFI stub: Using DTB from configuration tableEFI stub: Exiting boot services...[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034][    0.000000] Linux version 6.6.83 (builder@buildhost) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 13.3.0 r29028-adc4d95c74) 13.3.0, GNU ld (GNU Binutils) 2.42) #0 SMP Sun Mar 16 21:43:02 2025[    0.000000] KASLR enabled[    0.000000] Machine model: linux,dummy-virt.... skipped ....[    0.004525] printk: console [tty1] enabled[    0.004786] printk: bootconsole [pl11] disabledPlease press Enter to activate this console.BusyBox v1.37.0 (2025-03-16 21:43:02 UTC) built-in shell (ash)  _______                     ________        __ |       |.-----.-----.-----.|  |  |  |.----.|  |_ |   -   ||  _  |  -__|     ||  |  |  ||   _||   _| |_______||   __|_____|__|__||________||__|  |____|          |__| W I R E L E S S   F R E E D O M ----------------------------------------------------- OpenWrt SNAPSHOT, r29028-adc4d95c74 -----------------------------------------------------=== WARNING! =====================================There is no root password defined on this device!Use the \"passwd\" command to set up a new passwordin order to prevent unauthorized SSH logins. -----------------------------------------------------root@OpenWrt:~#OpenWrt version and board detailsThe openwrt version and board_name related details from the ARMSR system,root@OpenWrt:~# cat /etc/openwrt_releaseDISTRIB_ID='OpenWrt'DISTRIB_RELEASE='SNAPSHOT'DISTRIB_REVISION='r29028-adc4d95c74'DISTRIB_TARGET='armsr/armv8'DISTRIB_ARCH='aarch64_generic'DISTRIB_DESCRIPTION='OpenWrt SNAPSHOT r29028-adc4d95c74'DISTRIB_TAINTS=''root@OpenWrt:~# cat /etc/openwrt_versionr29028-adc4d95c74root@OpenWrt:~# cat /tmp/sysinfo/board_namelinux,dummy-virtEthernetIP Address is assigned to the WAN Interface of the Target device.And Target device could able to reach Internet through WAN Network.root@OpenWrt:~# ifconfig eth1eth1      Link encap:Ethernet  HWaddr 52:54:00:12:34:57          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0          inet6 addr: fec0::5054:ff:fe12:3457/64 Scope:Site          inet6 addr: fe80::5054:ff:fe12:3457/64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:184 errors:0 dropped:0 overruns:0 frame:0          TX packets:229 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:17075 (16.6 KiB)  TX bytes:22998 (22.4 KiB)root@OpenWrt:~# ping 8.8.8.8PING 8.8.8.8 (8.8.8.8): 56 data bytes64 bytes from 8.8.8.8: seq=0 ttl=255 time=8.390 ms.... skipped ....root@OpenWrt:~# ping -c 3 google.comPING google.com (142.250.196.78): 56 data bytes64 bytes from 142.250.196.78: seq=0 ttl=255 time=5.849 ms64 bytes from 142.250.196.78: seq=1 ttl=255 time=8.664 ms64 bytes from 142.250.196.78: seq=2 ttl=255 time=8.852 ms--- google.com ping statistics ---3 packets transmitted, 3 packets received, 0% packet lossround-trip min/avg/max = 5.849/7.788/8.852 msA New OpenWrt BeginningWith OpenWrt running on qemu, It opens up a way to explore OpenWrt without realhardware and allows for endless option to tweak and tune your experiments.Referenceshttps://www.qemu.org/docs/master/system/target-arm.htmlhttps://openwrt.org/docs/guide-user/virtualization/qemuhttps://github.com/ARM-software/arm-systemreadyhttps://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/arm-systemready"
  }
  
]

