[
  
  {
    "title": "Build your own OpenWrt firmware for armsr target",
    "url": "/posts/build-openwrt-for-armsr/",
    "categories": "blog, tutorial",
    "tags": "openwrt, qemu, armsr, wireless, routers",
    "date": "2025-03-19 10:00:00 +0530",
    





    
    "snippet": "In the previous article Explore OpenWrt on Emulated hardware,We have seen how to explore OpenWrt without a real hardware. OpenWrt is emulatedusing qemu for armsr target with the pre-built image fro...",
    "content": "In the previous article Explore OpenWrt on Emulated hardware,We have seen how to explore OpenWrt without a real hardware. OpenWrt is emulatedusing qemu for armsr target with the pre-built image from OpenWrt&#8217;s Snapshotdownloads for armsr-armv8. In this article, we can build our own custom Imagesfor armsr target using OpenWrt Buildand can emulate OpenWrt using qemu with the custom generated image.Building your own OpenWrt firmware has several advantages likeExplore OpenWrt components, features and packagesExplore the build system and architectureExplore new features which are not part of the pre-built imagesOptimize the OpenWrt firmware by having only the mandatory packagesBuild firmware with custom changes to understand the feature betterDevelop and Implement new features in OpenWrtBring-up new hardware support in OpenWrtBuild OpenWrt for armsr-armv8DevelopmentTo build your own firmware you need a GNU/Linux, BSD or macOS system (casesensitive filesystem required). Cygwin is unsupported because of the lack of acase sensitive file system.RequirementsYou need the following tools to compile OpenWrt, the package names vary betweendistributions. A complete list with distribution specific packages is found inthe Build System Setupdocumentation.binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-devmake4.1+ perl python3.7+ rsync subversion unzip whichOpenWrt repo initializationClone the OpenWRT repo using the commandgit clone https://github.com/openwrt/openwrt.gitcd openwrtCheckout to Latest Stable release (optional)Checkout to OpenWrt latest stable release - v24.10.0git checkout v24.10.0Update &amp; Install feedsRun ./scripts/feeds update -a to obtain all the latest package definitionsdefined in feeds.conf / feeds.conf.defaultRun ./scripts/feeds install -a to install symlinks for all obtainedpackages into package/feeds/Configure Build Target profileSelect and save armsr target profile using the make menuconfig command in the below sequence1. Target System -&gt; Arm SystemReady (EFI) compliant2. Subtarget -&gt; 64-bit (armv8) machines3. Target Profile -&gt; Generic EFI Boot4. Save -&gt; .config5. Exit -&gt; YesTrigger OpenWrt buildExecute the below command to trigger the OpenWrt buildmake V=e -j$(nproc)Build ArtifactsList of OpenWrt Firmware Images generated for armsr devicesKernel &amp; Rootfs Image - bin/targets/armsr/armv8/openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gzu-boot Image - bin/targets/armsr/armv8/u-boot-qemu_armv8/u-boot.binRunning OpenWrt using qemu with generated ImagesIn the bin directory of the OpenWrt build, Decompress theopenwrt-armsr-armv8-generic-squashfs-combined-efi.img.gz into openwrt-arm-64.imgcd bin/targets/armsr/armv8/gunzip -c openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gz &gt; openwrt-arm-64.imgEmulate OpenWrt for armsr-armv8 target using qemu-system-aarch64 command withthe default arguments for kernel, rootfs image, cpu and network options.qemu-system-aarch64 -nographic \\    -cpu cortex-a53 -machine virt \\    -bios u-boot-qemu_armv8/u-boot.bin \\    -smp 1 -m 1024 \\    -device virtio-rng-pci \\    -drive file=openwrt-arm-64.img,format=raw,index=0,media=disk \\    -netdev user,id=testlan -net nic,netdev=testlan \\    -netdev user,id=testwan -net nic,netdev=testwanWalkthrough OpenWrt bootlog for armsr-armv8OpenWrt is successfully booted for armsr-armv8 target with our custom Image.Below excerpt from the OpenWrt bootlog, covers the following stages of booting,Booting : U-BootBooting : Linux kernel with version Linux version 6.6.73OpenWrt promptU-Boot 2023.04-OpenWrt-r28427-6df0e3d02a (Feb 03 2025 - 23:09:37 +0000)DRAM:  1 GiBCore:  51 devices, 14 uclasses, devicetree: boardFlash: 64 MiBLoading Environment from Flash... *** Warning - bad CRC, using default environmentIn:    pl011@9000000Out:   pl011@9000000Err:   pl011@9000000Net:   eth0: virtio-net#32, eth1: virtio-net#33Hit any key to stop autoboot:  0.... skipped ....EFI stub: Booting Linux Kernel...EFI stub: Using DTB from configuration tableEFI stub: Exiting boot services...[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034][    0.000000] Linux version 6.6.73 (user@linux) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 13.3.0 r28427-6df0e3d02a) 13.3.0, GNU ld (GNU Binutils) 2.42) #0 SMP Mon Feb  3 23:09:37 2025[    0.000000] KASLR enabled[    0.000000] Machine model: linux,dummy-virt.... skipped ....[    0.002194] printk: console [tty1] enabled[    0.002466] printk: bootconsole [pl11] disabledPlease press Enter to activate this console.BusyBox v1.36.1 (2025-02-03 23:09:37 UTC) built-in shell (ash)  _______                     ________        __ |       |.-----.-----.-----.|  |  |  |.----.|  |_ |   -   ||  _  |  -__|     ||  |  |  ||   _||   _| |_______||   __|_____|__|__||________||__|  |____|          |__| W I R E L E S S   F R E E D O M ----------------------------------------------------- OpenWrt 24.10.0, r28427-6df0e3d02a -----------------------------------------------------=== WARNING! =====================================There is no root password defined on this device!Use the \"passwd\" command to set up a new passwordin order to prevent unauthorized SSH logins.--------------------------------------------------root@OpenWrt:~#Kernel and OpenWrt versionKernel and OpenWrt version related details from the ARMSR system based on the custom generated Imageroot@OpenWrt:~# cat /etc/openwrt_releaseDISTRIB_ID='OpenWrt'DISTRIB_RELEASE='24.10.0'DISTRIB_REVISION='r28427-6df0e3d02a'DISTRIB_TARGET='armsr/armv8'DISTRIB_ARCH='aarch64_generic'DISTRIB_DESCRIPTION='OpenWrt 24.10.0 r28427-6df0e3d02a'DISTRIB_TAINTS='no-all'root@OpenWrt:~# uname -aLinux OpenWrt 6.6.73 #0 SMP Mon Feb  3 23:09:37 2025 aarch64 GNU/LinuxUnlocking New Explorations in OpenWrtWith OpenWrt running on qemu with our custom built Image, It opens up a way tobuild, modify, test existing OpenWrt packages (or) Create a new packages whichcan be executed/validated on the emulated hardware and allows for endless optionto learn OpenWrt and its build system.Referenceshttps://dineshloganathan395.github.io/posts/explore-openwrt-on-emulated-hardwarehttps://github.com/openwrt/openwrthttps://openwrt.org/docs/guide-developer/toolchain/buildsystem_essentialshttps://openwrt.org/docs/guide-developer/toolchain/use-buildsystem"
  },
  
  {
    "title": "Explore OpenWrt on Emulated hardware",
    "url": "/posts/explore-openwrt-on-emulated-hardware/",
    "categories": "blog, tutorial",
    "tags": "openwrt, qemu, armsr, wireless, routers",
    "date": "2025-03-17 10:00:00 +0530",
    





    
    "snippet": "OpenWrt - An overviewOpenWrt (Open Wireless RouTer) is an open-source project for creating anembedded operating systems based on Linux. OpenWrt is designed for embeddeddevices, particularly routers...",
    "content": "OpenWrt - An overviewOpenWrt (Open Wireless RouTer) is an open-source project for creating anembedded operating systems based on Linux. OpenWrt is designed for embeddeddevices, particularly routers and is capable to run in range of hardware products,be it low memory Wi-Fi routers, CPE routers, residential gateways, access pointsand so on. In this article, the possibilities of booting up arouter operating system like OpenWrt without a physical hardware is unravelled.Features of OpenWrtBelow are the few key features of OpenWrtConfiguration over command line interface (or) web interface(LuCI)CustomizationPerformance and StabilityAdvanced Networking Features like firewall, VLAN, VPN, QoS and so onEnhanced SecurityMesh NetworkingPackage Management using opkg/apkg package managerUnleash OpenWrt on non-physical hardwareWhile OpenWrt is primarily designed for embedded devices like routers, it&#8217;s notstrictly limited to real hardware and can also be run in virtual machines (VMs),emulator, or on x86 hardware. OpenWrt provides QEMU packages for ARM and x86platforms to explore the OS without the need of real hardware&#8217;s using emulators.QEMU (Quick EMUlator) is a powerful, open-source processor emulator andvirtualizer. QEMU can emulate various CPU architectures (like x86, ARM and soon) and hardware devices allowing you to run software and operating systemsdesigned for those architectures on your current system.This articles helps us to emulate OpenWrt using qemu in Arm SystemReady targetArm SystemReadyArm SystemReady (or) armsr is an openwrt target that is developed based onArmSystemReady compliance program where an Operating System image will becompatible across ARM based hardware manufacturers.Arm SystemReady is implemented in alignment with the two OS environment andfirmware approaches commonly used to generate and install the OS Images. Theseare split into the following bandsSystemReady bandSystemReady Devicetree bandOpenWrt uses the SystemReady Devicetree band, where the preferred method ofbooting the OS is based on the hardware devicetree.Arm SystemReady on OpenWrtarmsr takes over from the previous armvirt target in OpenWrt and addssupport for Arm systems that support booting EFI images. armsr supports the belowsubtargetsarmv7 for 32-bit machinesarmv8 for 64-bit machinesQEMU can be used to emulate armsr target running OpenWrt without the needs forreal hardware.Refer OpenWrt Target &#8594; armsr &#8594; READMEto get the detailed instructions on how to boot the OpenWrt SystemReady image.Running OpenWrt using qemuFor Running OpenWrt on QEMU, we can use armsr-armv8 as a reference target to bootand analyse OpenWrt OS.Prebuilt Images are available and can be downloaded from the OpenWrt&#8217;s Snapshotdownloads for armsr-armv8.Download the below image files from the OpenWrt link for emulating armsr targetusing qemu.openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gzu-boot-qemu_armv8/u-boot.binDecompress the generic-squashfs-combined-efi.img.gz into openwrt-arm-64.imggunzip -c openwrt-armsr-armv8-generic-squashfs-combined-efi.img.gz &gt; openwrt-arm-64.imgEmulate OpenWrt for armsr-armv8 target using qemu-system-aarch64 command withthe default arguments for kernel, rootfs image, cpu and network options.qemu-system-aarch64 -nographic \\    -cpu cortex-a53 -machine virt \\    -bios u-boot.bin \\    -smp 1 -m 1024 \\    -device virtio-rng-pci \\    -drive file=openwrt-arm-64.img,format=raw,index=0,media=disk \\    -netdev user,id=testlan -net nic,netdev=testlan \\    -netdev user,id=testwan -net nic,netdev=testwanWalkthrough OpenWrt bootlog for armsr-armv8OpenWrt is successfully booted for armsr-armv8 target.Below excerpt from the OpenWrt bootlog, covers the following stages of booting,Booting : U-BootBooting : Linux kernel with version Linux version 6.6.83OpenWrt promptU-Boot 2023.04-OpenWrt-r29028-adc4d95c74 (Mar 16 2025 - 21:43:02 +0000)DRAM:  1 GiBCore:  51 devices, 14 uclasses, devicetree: boardFlash: 64 MiBLoading Environment from Flash... *** Warning - bad CRC, using default environmentIn:    pl011@9000000Out:   pl011@9000000Err:   pl011@9000000Net:   eth0: virtio-net#32, eth1: virtio-net#33Hit any key to stop autoboot:  0.... skipped ....EFI stub: Booting Linux Kernel...EFI stub: Using DTB from configuration tableEFI stub: Exiting boot services...[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034][    0.000000] Linux version 6.6.83 (builder@buildhost) (aarch64-openwrt-linux-musl-gcc (OpenWrt GCC 13.3.0 r29028-adc4d95c74) 13.3.0, GNU ld (GNU Binutils) 2.42) #0 SMP Sun Mar 16 21:43:02 2025[    0.000000] KASLR enabled[    0.000000] Machine model: linux,dummy-virt.... skipped ....[    0.004525] printk: console [tty1] enabled[    0.004786] printk: bootconsole [pl11] disabledPlease press Enter to activate this console.BusyBox v1.37.0 (2025-03-16 21:43:02 UTC) built-in shell (ash)  _______                     ________        __ |       |.-----.-----.-----.|  |  |  |.----.|  |_ |   -   ||  _  |  -__|     ||  |  |  ||   _||   _| |_______||   __|_____|__|__||________||__|  |____|          |__| W I R E L E S S   F R E E D O M ----------------------------------------------------- OpenWrt SNAPSHOT, r29028-adc4d95c74 -----------------------------------------------------=== WARNING! =====================================There is no root password defined on this device!Use the \"passwd\" command to set up a new passwordin order to prevent unauthorized SSH logins. -----------------------------------------------------root@OpenWrt:~#OpenWrt version and board detailsThe openwrt version and board_name related details from the ARMSR system,root@OpenWrt:~# cat /etc/openwrt_releaseDISTRIB_ID='OpenWrt'DISTRIB_RELEASE='SNAPSHOT'DISTRIB_REVISION='r29028-adc4d95c74'DISTRIB_TARGET='armsr/armv8'DISTRIB_ARCH='aarch64_generic'DISTRIB_DESCRIPTION='OpenWrt SNAPSHOT r29028-adc4d95c74'DISTRIB_TAINTS=''root@OpenWrt:~# cat /etc/openwrt_versionr29028-adc4d95c74root@OpenWrt:~# cat /tmp/sysinfo/board_namelinux,dummy-virtEthernetIP Address is assigned to the WAN Interface of the Target device.And Target device could able to reach Internet through WAN Network.root@OpenWrt:~# ifconfig eth1eth1      Link encap:Ethernet  HWaddr 52:54:00:12:34:57          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0          inet6 addr: fec0::5054:ff:fe12:3457/64 Scope:Site          inet6 addr: fe80::5054:ff:fe12:3457/64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:184 errors:0 dropped:0 overruns:0 frame:0          TX packets:229 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:17075 (16.6 KiB)  TX bytes:22998 (22.4 KiB)root@OpenWrt:~# ping 8.8.8.8PING 8.8.8.8 (8.8.8.8): 56 data bytes64 bytes from 8.8.8.8: seq=0 ttl=255 time=8.390 ms.... skipped ....root@OpenWrt:~# ping -c 3 google.comPING google.com (142.250.196.78): 56 data bytes64 bytes from 142.250.196.78: seq=0 ttl=255 time=5.849 ms64 bytes from 142.250.196.78: seq=1 ttl=255 time=8.664 ms64 bytes from 142.250.196.78: seq=2 ttl=255 time=8.852 ms--- google.com ping statistics ---3 packets transmitted, 3 packets received, 0% packet lossround-trip min/avg/max = 5.849/7.788/8.852 msA New OpenWrt BeginningWith OpenWrt running on qemu, It opens up a way to explore OpenWrt without realhardware and allows for endless option to tweak and tune your experiments.Referenceshttps://www.qemu.org/docs/master/system/target-arm.htmlhttps://openwrt.org/docs/guide-user/virtualization/qemuhttps://github.com/ARM-software/arm-systemreadyhttps://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/arm-systemready"
  }
  
]

